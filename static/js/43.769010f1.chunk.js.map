{"version":3,"sources":["components/Table/styled.tsx","components/Table/index.tsx","service/app/transaction.ts","components/Card/ItemCard/styled.tsx","components/Card/ItemCard/index.tsx","pages/TransactionList/styled.tsx","pages/TransactionList/index.tsx"],"names":["TableTitleRow","styled","div","props","theme","primary","TableTitleRowItem","width","TableContentRow","Math","ceil","window","devicePixelRatio","TableContentRowItem","TableMinerContentPanel","fontSize","HighlightLink","TableTitleItem","title","TableContentItem","content","to","highLight","undefined","TableMinerContentItem","smallWidth","addressText","adaptPCEllipsis","innerWidth","isMobile","adaptMobileEllipsis","className","includes","placement","i18n","t","handleStatus","dispatch","status","type","PageActions","UpdateTransactionStatus","payload","AppActions","UpdateLoading","loading","getTransactionByHash","hash","fetchTransactionByHash","then","wrapper","transactionValue","attributes","displayOutputs","length","isGenesisOutput","blockNumber","UpdateTransaction","transaction","catch","getTransactions","page","size","fetchTransactions","response","data","meta","UpdateTransactions","transactions","map","UpdateTransactionsTotal","total","getLatestTransactions","fetchLatestTransactions","ItemCardPanel","ItemContentPanel","ItemDetailPanel","hideLine","ItemDetail","item","items","children","outputIndex","id","index","key","TransactionListPanel","ContentTable","HighLightValue","TransactionCapacityPanel","TransactionValueItem","value","TransactionCardItems","transactionCapacity","DecimalCapacity","localeNumberString","shannonToCkb","capacityInvolved","hideUnit","transactionHash","parseSimpleDate","blockTimestamp","useDispatch","useHistory","replace","push","search","useLocation","useTranslation","TableTitles","useMemo","parsed","queryString","parse","transactionsState","useAppState","currentPage","parsePageNumber","ListPageParams","PageNo","pageSize","PageSize","totalPages","useEffect","MaxPageSize","Content","ItemCard","Table","getTableContentTxList","Pagination","onChange"],"mappings":"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","file":"static/js/43.769010f1.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\nexport const TableTitleRow = styled.div`\n  background: ${props => props.theme.primary};\n  display: flex;\n  min-height: 65px;\n  border-radius: 6px 6px 0px 0px;\n  padding: 0 20px;\n`\n\nexport const TableTitleRowItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: ${({ width }: { width: string }) => width};\n  min-height: 65px;\n\n  > div {\n    color: white;\n    font-size: 18px;\n    font-weight: 450;\n    text-align: center;\n\n    @media (max-width: 1000px) {\n      font-size: 16px;\n    }\n  }\n`\n\nexport const TableContentRow = styled.div`\n  position: relative;\n  display: flex;\n  min-height: 60px;\n  background-color: white;\n  padding: 20px;\n\n  ::after {\n    content: '';\n    position: absolute;\n    display: block;\n    width: auto;\n    height: 1px;\n    left: 20px;\n    right: 20px;\n    bottom: 1px;\n    background: #d8d8d8;\n    transform: ${() => `scaleY(${Math.ceil((1.0 / window.devicePixelRatio) * 10.0) / 10.0})`};\n  }\n\n  :hover {\n    background: #f8f9fa;\n  }\n`\n\nexport const TableContentRowItem = styled.div`\n  width: ${({ width }: { width: string }) => width};\n  color: #000000;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n  text-overflow: ellipsis;\n  font-size: 16px;\n\n  a {\n    color: ${props => props.theme.primary};\n  }\n\n  a:hover {\n    color: ${props => props.theme.primary};\n  }\n`\n\nexport const TableMinerContentPanel = styled.div`\n  width: ${(props: { width: string }) => props.width};\n  line-height: 20px;\n  text-align: center;\n  margin: auto 0;\n  .table__miner__content {\n    color: ${(props: { theme: any }) => props.theme.primary};\n    text-decoration: none;\n  }\n\n  .table__miner__text {\n    width: 100%\n    justify-content: center;\n    font-size: ${(props: { width: string; fontSize: string }) => props.fontSize};\n    font-weight: 500;\n\n    @media(max-width: 750px) {\n      font-size: 13px;\n    }\n  }\n\n  .table__miner__text__disable {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: ${(props: { width: string; fontSize: string }) => props.fontSize};\n    color: #000000;\n\n    @media(max-width: 750px) {\n      font-size: 13px;\n    }\n  }\n`\n\nexport const HighlightLink = styled(props => <Link {...props} />)`\n  color: ${props => props.theme.primary}\n  text-decoration: none;\n`\n","import React, { ReactNode } from 'react'\nimport { Link } from 'react-router-dom'\nimport i18n from '../../utils/i18n'\nimport { adaptPCEllipsis, adaptMobileEllipsis } from '../../utils/string'\nimport { isMobile } from '../../utils/screen'\nimport { TableTitleRowItem, TableContentRowItem, HighlightLink, TableMinerContentPanel } from './styled'\nimport CopyTooltipText from '../Text/CopyTooltipText'\nimport { Tooltip } from 'antd'\n\nexport const TableTitleItem = ({ width, title }: { width: string; title: string }) => {\n  return (\n    <TableTitleRowItem width={width}>\n      <div>{title}</div>\n    </TableTitleRowItem>\n  )\n}\n\nexport const TableContentItem = ({ width, content, to }: { width: string; content: string | ReactNode; to?: any }) => {\n  const highLight = to !== undefined\n  return (\n    <TableContentRowItem width={width}>\n      {highLight ? <HighlightLink to={to}>{content}</HighlightLink> : content}\n    </TableContentRowItem>\n  )\n}\n\nexport const TableMinerContentItem = ({\n  width,\n  content,\n  smallWidth,\n  fontSize = '16px',\n}: {\n  width: string\n  content: string\n  smallWidth?: boolean\n  fontSize?: string\n}) => {\n  let addressText = adaptPCEllipsis(content, smallWidth ? 2 : 14, 60)\n  if (window.innerWidth <= 1320) {\n    addressText = adaptPCEllipsis(content, smallWidth ? 2 : 10, 60)\n  }\n  if (isMobile()) {\n    addressText = adaptMobileEllipsis(content, 11)\n  }\n  return (\n    <TableMinerContentPanel width={width} fontSize={fontSize}>\n      {content ? (\n        <Link className=\"table__miner__content\" to={`/address/${content}`}>\n          {addressText.includes('...') ? (\n            <Tooltip placement=\"top\" title={<CopyTooltipText content={content} />}>\n              <span className=\"table__miner__text monospace\">{addressText}</span>\n            </Tooltip>\n          ) : (\n            <span className=\"table__miner__text monospace\">{addressText}</span>\n          )}\n        </Link>\n      ) : (\n        <div className=\"table__miner__text__disable\">{i18n.t('address.unable_decode_address')}</div>\n      )}\n    </TableMinerContentPanel>\n  )\n}\n","import { fetchTransactionByHash, fetchTransactions, fetchLatestTransactions } from '../http/fetcher'\nimport { AppDispatch } from '../../contexts/reducer'\nimport { AppActions, PageActions } from '../../contexts/actions'\n\nconst handleStatus = (dispatch: AppDispatch, status: State.FetchStatus) => {\n  dispatch({\n    type: PageActions.UpdateTransactionStatus,\n    payload: {\n      status,\n    },\n  })\n  dispatch({\n    type: AppActions.UpdateLoading,\n    payload: {\n      loading: false,\n    },\n  })\n}\n\nexport const getTransactionByHash = (hash: string, dispatch: AppDispatch) => {\n  handleStatus(dispatch, 'InProgress')\n  fetchTransactionByHash(hash)\n    .then((wrapper: Response.Wrapper<State.Transaction> | null) => {\n      if (wrapper) {\n        const transactionValue = wrapper.attributes\n        if (transactionValue.displayOutputs && transactionValue.displayOutputs.length > 0) {\n          transactionValue.displayOutputs[0].isGenesisOutput = transactionValue.blockNumber === 0\n        }\n        dispatch({\n          type: PageActions.UpdateTransaction,\n          payload: {\n            transaction: transactionValue,\n          },\n        })\n        handleStatus(dispatch, 'OK')\n      } else {\n        handleStatus(dispatch, 'Error')\n      }\n    })\n    .catch(() => {\n      handleStatus(dispatch, 'Error')\n    })\n}\n\nexport const getTransactions = (page: number, size: number, dispatch: AppDispatch) => {\n  handleStatus(dispatch, 'InProgress')\n  fetchTransactions(page, size)\n    .then(response => {\n      const { data, meta } = response as Response.Response<Response.Wrapper<State.Transaction>[]>\n      dispatch({\n        type: PageActions.UpdateTransactions,\n        payload: {\n          transactions:\n            data.map((wrapper: Response.Wrapper<State.Transaction>) => {\n              return wrapper.attributes\n            }) || [],\n        },\n      })\n      dispatch({\n        type: PageActions.UpdateTransactionsTotal,\n        payload: {\n          total: meta ? meta.total : 0,\n        },\n      })\n      handleStatus(dispatch, 'OK')\n    })\n    .catch(() => {\n      handleStatus(dispatch, 'Error')\n    })\n}\n\nexport const getLatestTransactions = (dispatch: AppDispatch) => {\n  handleStatus(dispatch, 'InProgress')\n  fetchLatestTransactions()\n    .then(response => {\n      const { data, meta } = response as Response.Response<Response.Wrapper<State.Transaction>[]>\n      dispatch({\n        type: PageActions.UpdateTransactions,\n        payload: {\n          transactions:\n            data.map((wrapper: Response.Wrapper<State.Transaction>) => {\n              return wrapper.attributes\n            }) || [],\n        },\n      })\n      dispatch({\n        type: PageActions.UpdateTransactionsTotal,\n        payload: {\n          total: meta ? meta.total : 0,\n        },\n      })\n      handleStatus(dispatch, 'OK')\n    })\n    .catch(() => {\n      handleStatus(dispatch, 'Error')\n    })\n}\n","import styled from 'styled-components'\n\nexport const ItemCardPanel = styled.div`\n  width: 100%;\n  background-color: #ffffff;\n  color: #000000;\n  font-size: 16px;\n  margin-top: 20px;\n  border-radius: 0px 0px 6px 6px;\n  box-shadow: 2px 2px 6px 0 #dfdfdf;\n  padding: 15px 40px;\n\n  @media (max-width: 1000px) {\n    font-size: 13px;\n  }\n\n  @media (max-width: 750px) {\n    font-size: 13px;\n    box-shadow: 1px 1px 3px 0 #dfdfdf;\n    padding: 10px 20px;\n    margin-top: 4px;\n  }\n`\n\nexport const ItemContentPanel = styled.div`\n  margin-right: 45px;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n\n  @media (max-width: 1200px) {\n    width: 100%;\n    margin-right: 0px;\n  }\n`\n\nexport const ItemDetailPanel = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between;\n  position: relative;\n\n  @media (min-width: 750px) {\n    height: 20px;\n    margin-top: 14px;\n  }\n\n  @media (min-width: 1200px) {\n    height: 20px;\n    margin-top: 14px;\n  }\n\n  @media (max-width: 750px) {\n    justify-content: normal;\n    flex-direction: column;\n    align-items: flex-start;\n\n    &:after {\n      content: '';\n      background: #e2e2e2;\n      height: 1px;\n      width: 100%;\n      margin: 10px 0px 0px 0px;\n      display: ${({ hideLine }: { hideLine: boolean }) => (hideLine ? 'none' : 'block')};\n      transform: ${() => `scaleY(${Math.ceil((1.0 / window.devicePixelRatio) * 10.0) / 10.0})`};\n    }\n  }\n\n  .item__detail__title {\n    font-size: 16px;\n    color: rgba(0, 0, 0, 0.6);\n    margin-left: 0px;\n\n    @media (max-width: 750px) {\n      width: 100%;\n      margin-left: 0px;\n    }\n  }\n\n  .item__detail__value {\n    margin-left: 15px;\n    display: flex;\n    font-size: 16px;\n    color: #000000;\n\n    @media (max-width: 750px) {\n      margin-left: 0px;\n      word-wrap: break-word;\n      word-break: break-all;\n      width: 100%;\n    }\n\n    a {\n      color: ${props => props.theme.primary};\n    }\n\n    a:hover {\n      color: ${props => props.theme.primary};\n    }\n  }\n\n  .block_pointer {\n    cursor: pointer;\n  }\n`\n","import React, { ReactNode } from 'react'\nimport { ItemCardPanel, ItemContentPanel, ItemDetailPanel } from './styled'\n\nexport interface ItemCardData {\n  title: string\n  content: ReactNode\n}\n\nexport const ItemDetail = ({ item, hideLine }: { item: ItemCardData; hideLine: boolean }) => {\n  return (\n    <ItemDetailPanel hideLine={hideLine}>\n      <div className=\"item__detail__title\">{item.title}</div>\n      <div className=\"item__detail__value\">{item.content}</div>\n    </ItemDetailPanel>\n  )\n}\n\nexport default ({\n  items,\n  children,\n  outputIndex,\n}: {\n  items: ItemCardData[]\n  children?: ReactNode\n  outputIndex?: string\n}) => {\n  return (\n    <ItemCardPanel id={outputIndex ? `output_${outputIndex}` : ''}>\n      <ItemContentPanel>\n        {items.map((item, index) => (\n          <ItemDetail key={item.title} item={item} hideLine={index === items.length - 1} />\n        ))}\n      </ItemContentPanel>\n      {children}\n    </ItemCardPanel>\n  )\n}\n","import styled from 'styled-components'\n\nexport const TransactionListPanel = styled.div`\n  @media (min-width: 750px) {\n    margin-top: 25px;\n    margin-bottom: 40px;\n    border-radius: 6px;\n    overflow: hidden;\n    box-shadow: 0 2px 6px 0 rgba(77, 77, 77, 0.21);\n  }\n\n  @media (max-width: 750px) {\n    margin-top: 0px;\n    padding: 0px 20px 0px 20px;\n\n    .transaction__green__background {\n      margin-left: -20px;\n      height: 61px;\n      width: calc(100% + 40px);\n      background-color: ${props => props.theme.primary};\n      z-index: 1;\n    }\n  }\n\n  .transaction_list__pagination {\n    @media (max-width: 750px) {\n      margin-top: 5px;\n    }\n  }\n`\n\nexport const ContentTitle = styled.div`\n  font-size: 50px;\n  color: black;\n  margin: 0 auto;\n  text-align: center;\n\n  @media (max-width: 750px) {\n    font-size: 26px;\n  }\n\n  &:after {\n    content: '';\n    background: ${props => props.theme.primary};\n    height: 4px;\n    width: 197px;\n    display: block;\n    margin: 0 auto;\n\n    @media (max-width: 750px) {\n      width: 80px;\n    }\n  }\n`\n\nexport const ContentTable = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  z-index: 2;\n\n  .transaction__green__background {\n    margin-left: -20px;\n    height: 61px;\n    width: calc(100% + 40px);\n    background-color: ${props => props.theme.primary};\n    z-index: 1;\n  }\n\n  .transaction__panel {\n    margin-top: -41px;\n    z-index: 2;\n  }\n`\n\nexport const HighLightValue = styled.div`\n  color: ${props => props.theme.primary};\n  font-size: 13px;\n  height: 16px;\n`\n\nexport const TransactionCapacityContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n\n  @media (max-width: 750px) {\n    align-items: flex-end;\n    justify-content: flex-start;\n  }\n\n  :after {\n    display: inline;\n    content: '+';\n    color: #7f7d7d;\n    font-size: 13px;\n  }\n`\n\nexport const TransactionCapacityPanel = styled.div`\n  display: flex;\n  justify-content: center;\n`\n","import React, { useEffect, useMemo } from 'react'\nimport { Link, useHistory, useLocation } from 'react-router-dom'\nimport queryString from 'query-string'\nimport { useTranslation } from 'react-i18next'\nimport { parseSimpleDate } from '../../utils/date'\nimport Content from '../../components/Content'\nimport { TableTitleRow, TableContentRow } from '../../components/Table/styled'\nimport { TableTitleItem, TableContentItem } from '../../components/Table'\nimport { shannonToCkb } from '../../utils/util'\nimport { parsePageNumber, adaptMobileEllipsis, adaptPCEllipsis } from '../../utils/string'\nimport { ListPageParams } from '../../utils/const'\nimport { localeNumberString } from '../../utils/number'\nimport { isMobile } from '../../utils/screen'\nimport i18n from '../../utils/i18n'\nimport Pagination from '../../components/Pagination'\nimport { useDispatch, useAppState } from '../../contexts/providers'\nimport DecimalCapacity from '../../components/DecimalCapacity'\nimport { getTransactions } from '../../service/app/transaction'\nimport ItemCard, { ItemCardData } from '../../components/Card/ItemCard'\nimport { TransactionCapacityPanel, TransactionListPanel, ContentTable, HighLightValue } from './styled'\n\ninterface TableTitleData {\n  title: string\n  width: string\n}\n\ninterface TableContentData {\n  width: string\n  to?: any\n  content: string\n}\n\nconst TransactionValueItem = ({ value, to }: { value: string; to: string }) => {\n  return (\n    <HighLightValue>\n      <Link to={to}>\n        {' '}\n        <span>{value}</span>\n      </Link>\n    </HighLightValue>\n  )\n}\n\nconst getTableContentTxList = (transaction: State.Transaction) => {\n  const transactionCapacity = (\n    <TransactionCapacityPanel>\n      <DecimalCapacity value={localeNumberString(shannonToCkb(transaction.capacityInvolved))} hideUnit />\n    </TransactionCapacityPanel>\n  )\n\n  return [\n    {\n      width: '40%',\n      to: `/transaction/${transaction.transactionHash}`,\n      content: adaptPCEllipsis(transaction.transactionHash),\n    },\n    {\n      width: '15%',\n      to: `/block/${transaction.blockNumber}`,\n      content: localeNumberString(transaction.blockNumber),\n    },\n    {\n      width: '30%',\n      content: transactionCapacity,\n    },\n    {\n      width: '15%',\n      content: parseSimpleDate(transaction.blockTimestamp),\n    },\n  ] as TableContentData[]\n}\n\nconst TransactionCardItems = (transaction: State.Transaction) => {\n  const transactionCapacity = (\n    <TransactionCapacityPanel>\n      <DecimalCapacity value={localeNumberString(shannonToCkb(transaction.capacityInvolved))} hideUnit />\n    </TransactionCapacityPanel>\n  )\n  return [\n    {\n      title: i18n.t('transaction.transaction_hash'),\n      content: (\n        <TransactionValueItem\n          value={adaptMobileEllipsis(transaction.transactionHash, 12)}\n          to={`/transaction/${transaction.transactionHash}`}\n        />\n      ),\n    },\n    {\n      title: i18n.t('transaction.height'),\n      content: (\n        <TransactionValueItem\n          value={localeNumberString(transaction.blockNumber)}\n          to={`/block/${transaction.blockNumber}`}\n        />\n      ),\n    },\n    {\n      title: i18n.t('transaction.capacity'),\n      content: transactionCapacity,\n    },\n    {\n      title: i18n.t('transaction.time'),\n      content: parseSimpleDate(transaction.blockTimestamp),\n    },\n  ] as ItemCardData[]\n}\n\nexport default () => {\n  const dispatch = useDispatch()\n  const { replace, push } = useHistory()\n  const { search } = useLocation()\n\n  const [t] = useTranslation()\n  const TableTitles = useMemo(() => {\n    return [\n      {\n        title: t('transaction.transaction_hash'),\n        width: '40%',\n      },\n      {\n        title: t('transaction.height'),\n        width: '15%',\n      },\n      {\n        title: t('transaction.capacity'),\n        width: '30%',\n      },\n      {\n        title: t('transaction.time'),\n        width: '15%',\n      },\n    ]\n  }, [t])\n\n  const parsed = queryString.parse(search)\n  const { transactionsState } = useAppState()\n  const { transactions = [], total } = transactionsState\n\n  const currentPage = parsePageNumber(parsed.page, ListPageParams.PageNo)\n  const pageSize = parsePageNumber(parsed.size, ListPageParams.PageSize)\n  const totalPages = Math.ceil(total / pageSize)\n\n  useEffect(() => {\n    if (pageSize > ListPageParams.MaxPageSize) {\n      replace(`/transaction/list?page=${currentPage}&size=${ListPageParams.MaxPageSize}`)\n    }\n    getTransactions(currentPage, pageSize, dispatch)\n  }, [replace, currentPage, pageSize, dispatch])\n\n  const onChange = (page: number) => {\n    push(`/transaction/list?page=${page}&size=${pageSize}`)\n  }\n\n  return (\n    <Content>\n      <TransactionListPanel className=\"container\">\n        <div className=\"transaction__green__background\" />\n        {isMobile() ? (\n          <ContentTable>\n            <div className=\"transaction__panel\">\n              {transactions.map((transaction: State.Transaction) => {\n                return <ItemCard key={transaction.transactionHash} items={TransactionCardItems(transaction)} />\n              })}\n            </div>\n          </ContentTable>\n        ) : (\n          <ContentTable>\n            <TableTitleRow>\n              {TableTitles.map((data: TableTitleData) => {\n                return <TableTitleItem width={data.width} title={data.title} key={data.title} />\n              })}\n            </TableTitleRow>\n            {transactions.map((transaction: State.Transaction) => {\n              return (\n                transaction && (\n                  <TableContentRow key={transaction.transactionHash}>\n                    {getTableContentTxList(transaction).map((data: TableContentData, index: number) => {\n                      const key = index\n                      return <TableContentItem width={data.width} content={data.content} to={data.to} key={key} />\n                    })}\n                  </TableContentRow>\n                )\n              )\n            })}\n          </ContentTable>\n        )}\n        <div className=\"transaction_list__pagination\">\n          <Pagination currentPage={currentPage} totalPages={totalPages} onChange={onChange} />\n        </div>\n      </TransactionListPanel>\n    </Content>\n  )\n}\n"],"sourceRoot":""}