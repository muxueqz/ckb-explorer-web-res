{"version":3,"sources":["components/Table/styled.tsx","service/app/block.ts","components/Table/index.tsx","components/Card/ItemCard/styled.tsx","components/Card/ItemCard/index.tsx","pages/BlockList/styled.tsx","pages/BlockList/index.tsx"],"names":["TableTitleRow","styled","div","props","theme","primary","TableTitleRowItem","width","TableContentRow","Math","ceil","window","devicePixelRatio","TableContentRowItem","TableMinerContentPanel","fontSize","HighlightLink","handleStatus","dispatch","status","type","PageActions","UpdateBlockStatus","payload","getBlock","blockParam","page","size","fetchBlock","then","wrapper","block","attributes","UpdateBlock","hash","fetchTransactionsByBlockHash","response","data","meta","UpdateBlockTransactions","transactions","map","UpdateBlockTotal","total","catch","getBlockTransactions","blockHash","getLatestBlocks","fetchBlocks","wrappers","blocks","UpdateHomeBlocks","homeBlocks","getBlocks","fetchBlockList","UpdateBlockListTotal","UpdateBlockList","TableTitleItem","title","TableContentItem","content","to","highLight","undefined","TableMinerContentItem","smallWidth","addressText","adaptPCEllipsis","innerWidth","isMobile","adaptMobileEllipsis","className","includes","placement","i18n","t","ItemCardPanel","ItemContentPanel","ItemDetailPanel","hideLine","ItemDetail","item","items","children","outputIndex","id","index","key","length","BlockListPanel","ContentTable","HighLightValue","BlockRewardContainer","BlockRewardPanel","BlockValueItem","value","BlockCardItems","blockReward","DELAY_BLOCK_NUMBER","DecimalCapacity","localeNumberString","shannonToCkb","reward","hideUnit","number","transactionsCount","minerHash","parseSimpleDate","timestamp","useDispatch","useHistory","replace","push","search","useLocation","useTranslation","TableTitles","useMemo","parsed","queryString","parse","useAppState","blockListState","currentPage","parsePageNumber","ListPageParams","PageNo","pageSize","PageSize","totalPages","useEffect","MaxPageSize","Content","ItemCard","Table","blockIndex","getTableContentDataList","Pagination","onChange"],"mappings":"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","file":"static/js/42.3af53f9d.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\nexport const TableTitleRow = styled.div`\n  background: ${props => props.theme.primary};\n  display: flex;\n  min-height: 65px;\n  border-radius: 6px 6px 0px 0px;\n  padding: 0 20px;\n`\n\nexport const TableTitleRowItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: ${({ width }: { width: string }) => width};\n  min-height: 65px;\n\n  > div {\n    color: white;\n    font-size: 18px;\n    font-weight: 450;\n    text-align: center;\n\n    @media (max-width: 1000px) {\n      font-size: 16px;\n    }\n  }\n`\n\nexport const TableContentRow = styled.div`\n  position: relative;\n  display: flex;\n  min-height: 60px;\n  background-color: white;\n  padding: 20px;\n\n  ::after {\n    content: '';\n    position: absolute;\n    display: block;\n    width: auto;\n    height: 1px;\n    left: 20px;\n    right: 20px;\n    bottom: 1px;\n    background: #d8d8d8;\n    transform: ${() => `scaleY(${Math.ceil((1.0 / window.devicePixelRatio) * 10.0) / 10.0})`};\n  }\n\n  :hover {\n    background: #f8f9fa;\n  }\n`\n\nexport const TableContentRowItem = styled.div`\n  width: ${({ width }: { width: string }) => width};\n  color: #000000;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n  text-overflow: ellipsis;\n  font-size: 16px;\n\n  a {\n    color: ${props => props.theme.primary};\n  }\n\n  a:hover {\n    color: ${props => props.theme.primary};\n  }\n`\n\nexport const TableMinerContentPanel = styled.div`\n  width: ${(props: { width: string }) => props.width};\n  line-height: 20px;\n  text-align: center;\n  margin: auto 0;\n  .table__miner__content {\n    color: ${(props: { theme: any }) => props.theme.primary};\n    text-decoration: none;\n  }\n\n  .table__miner__text {\n    width: 100%\n    justify-content: center;\n    font-size: ${(props: { width: string; fontSize: string }) => props.fontSize};\n    font-weight: 500;\n\n    @media(max-width: 750px) {\n      font-size: 13px;\n    }\n  }\n\n  .table__miner__text__disable {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: ${(props: { width: string; fontSize: string }) => props.fontSize};\n    color: #000000;\n\n    @media(max-width: 750px) {\n      font-size: 13px;\n    }\n  }\n`\n\nexport const HighlightLink = styled(props => <Link {...props} />)`\n  color: ${props => props.theme.primary}\n  text-decoration: none;\n`\n","import { fetchTransactionsByBlockHash, fetchBlock, fetchBlocks, fetchBlockList } from '../http/fetcher'\nimport { AppDispatch } from '../../contexts/reducer'\nimport { PageActions } from '../../contexts/actions'\n\nconst handleStatus = (dispatch: AppDispatch, status: State.FetchStatus) => {\n  dispatch({\n    type: PageActions.UpdateBlockStatus,\n    payload: {\n      status,\n    },\n  })\n}\n\nexport const getBlockTransactions = (hash: string, page: number, size: number, dispatch: AppDispatch) => {\n  fetchTransactionsByBlockHash(hash, page, size)\n    .then(response => {\n      handleStatus(dispatch, 'OK')\n      const { data, meta } = response as Response.Response<Response.Wrapper<State.Transaction>[]>\n      dispatch({\n        type: PageActions.UpdateBlockTransactions,\n        payload: {\n          transactions: data.map((wrapper: Response.Wrapper<State.Transaction>) => {\n            return wrapper.attributes\n          }),\n        },\n      })\n      if (meta) {\n        dispatch({\n          type: PageActions.UpdateBlockTotal,\n          payload: {\n            total: meta.total,\n          },\n        })\n      }\n    })\n    .catch(() => {\n      handleStatus(dispatch, 'Error')\n    })\n}\n\n// blockParam: block hash or block number\nexport const getBlock = (blockParam: string, page: number, size: number, dispatch: AppDispatch) => {\n  handleStatus(dispatch, 'InProgress')\n  fetchBlock(blockParam)\n    .then((wrapper: Response.Wrapper<State.Block> | null) => {\n      if (wrapper) {\n        const block = wrapper.attributes\n        dispatch({\n          type: PageActions.UpdateBlock,\n          payload: {\n            block,\n          },\n        })\n        getBlockTransactions(block.blockHash, page, size, dispatch)\n      } else {\n        handleStatus(dispatch, 'OK')\n      }\n    })\n    .catch(() => {\n      handleStatus(dispatch, 'Error')\n    })\n}\n\n// home page\nexport const getLatestBlocks = (dispatch: AppDispatch) => {\n  fetchBlocks().then((wrappers: Response.Wrapper<State.Block>[] | null) => {\n    if (wrappers) {\n      const blocks = wrappers.map((wrapper: Response.Wrapper<State.Block>) => {\n        return wrapper.attributes\n      })\n      dispatch({\n        type: PageActions.UpdateHomeBlocks,\n        payload: {\n          homeBlocks: blocks,\n        },\n      })\n    }\n  })\n}\n\n// block list page\nexport const getBlocks = (page: number, size: number, dispatch: AppDispatch) => {\n  fetchBlockList(page, size).then(response => {\n    const { data, meta } = response as Response.Response<Response.Wrapper<State.Block>[]>\n    if (meta) {\n      dispatch({\n        type: PageActions.UpdateBlockListTotal,\n        payload: {\n          total: meta.total,\n        },\n      })\n    }\n    if (data) {\n      const blocks = data.map((wrapper: Response.Wrapper<State.Block>) => {\n        return wrapper.attributes\n      })\n      dispatch({\n        type: PageActions.UpdateBlockList,\n        payload: {\n          blocks,\n        },\n      })\n    }\n  })\n}\n","import React, { ReactNode } from 'react'\nimport { Link } from 'react-router-dom'\nimport i18n from '../../utils/i18n'\nimport { adaptPCEllipsis, adaptMobileEllipsis } from '../../utils/string'\nimport { isMobile } from '../../utils/screen'\nimport { TableTitleRowItem, TableContentRowItem, HighlightLink, TableMinerContentPanel } from './styled'\nimport CopyTooltipText from '../Text/CopyTooltipText'\nimport { Tooltip } from 'antd'\n\nexport const TableTitleItem = ({ width, title }: { width: string; title: string }) => {\n  return (\n    <TableTitleRowItem width={width}>\n      <div>{title}</div>\n    </TableTitleRowItem>\n  )\n}\n\nexport const TableContentItem = ({ width, content, to }: { width: string; content: string | ReactNode; to?: any }) => {\n  const highLight = to !== undefined\n  return (\n    <TableContentRowItem width={width}>\n      {highLight ? <HighlightLink to={to}>{content}</HighlightLink> : content}\n    </TableContentRowItem>\n  )\n}\n\nexport const TableMinerContentItem = ({\n  width,\n  content,\n  smallWidth,\n  fontSize = '16px',\n}: {\n  width: string\n  content: string\n  smallWidth?: boolean\n  fontSize?: string\n}) => {\n  let addressText = adaptPCEllipsis(content, smallWidth ? 2 : 14, 60)\n  if (window.innerWidth <= 1320) {\n    addressText = adaptPCEllipsis(content, smallWidth ? 2 : 10, 60)\n  }\n  if (isMobile()) {\n    addressText = adaptMobileEllipsis(content, 11)\n  }\n  return (\n    <TableMinerContentPanel width={width} fontSize={fontSize}>\n      {content ? (\n        <Link className=\"table__miner__content\" to={`/address/${content}`}>\n          {addressText.includes('...') ? (\n            <Tooltip placement=\"top\" title={<CopyTooltipText content={content} />}>\n              <span className=\"table__miner__text monospace\">{addressText}</span>\n            </Tooltip>\n          ) : (\n            <span className=\"table__miner__text monospace\">{addressText}</span>\n          )}\n        </Link>\n      ) : (\n        <div className=\"table__miner__text__disable\">{i18n.t('address.unable_decode_address')}</div>\n      )}\n    </TableMinerContentPanel>\n  )\n}\n","import styled from 'styled-components'\n\nexport const ItemCardPanel = styled.div`\n  width: 100%;\n  background-color: #ffffff;\n  color: #000000;\n  font-size: 16px;\n  margin-top: 20px;\n  border-radius: 0px 0px 6px 6px;\n  box-shadow: 2px 2px 6px 0 #dfdfdf;\n  padding: 15px 40px;\n\n  @media (max-width: 1000px) {\n    font-size: 13px;\n  }\n\n  @media (max-width: 750px) {\n    font-size: 13px;\n    box-shadow: 1px 1px 3px 0 #dfdfdf;\n    padding: 10px 20px;\n    margin-top: 4px;\n  }\n`\n\nexport const ItemContentPanel = styled.div`\n  margin-right: 45px;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n\n  @media (max-width: 1200px) {\n    width: 100%;\n    margin-right: 0px;\n  }\n`\n\nexport const ItemDetailPanel = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between;\n  position: relative;\n\n  @media (min-width: 750px) {\n    height: 20px;\n    margin-top: 14px;\n  }\n\n  @media (min-width: 1200px) {\n    height: 20px;\n    margin-top: 14px;\n  }\n\n  @media (max-width: 750px) {\n    justify-content: normal;\n    flex-direction: column;\n    align-items: flex-start;\n\n    &:after {\n      content: '';\n      background: #e2e2e2;\n      height: 1px;\n      width: 100%;\n      margin: 10px 0px 0px 0px;\n      display: ${({ hideLine }: { hideLine: boolean }) => (hideLine ? 'none' : 'block')};\n      transform: ${() => `scaleY(${Math.ceil((1.0 / window.devicePixelRatio) * 10.0) / 10.0})`};\n    }\n  }\n\n  .item__detail__title {\n    font-size: 16px;\n    color: rgba(0, 0, 0, 0.6);\n    margin-left: 0px;\n\n    @media (max-width: 750px) {\n      width: 100%;\n      margin-left: 0px;\n    }\n  }\n\n  .item__detail__value {\n    margin-left: 15px;\n    display: flex;\n    font-size: 16px;\n    color: #000000;\n\n    @media (max-width: 750px) {\n      margin-left: 0px;\n      word-wrap: break-word;\n      word-break: break-all;\n      width: 100%;\n    }\n\n    a {\n      color: ${props => props.theme.primary};\n    }\n\n    a:hover {\n      color: ${props => props.theme.primary};\n    }\n  }\n\n  .block_pointer {\n    cursor: pointer;\n  }\n`\n","import React, { ReactNode } from 'react'\nimport { ItemCardPanel, ItemContentPanel, ItemDetailPanel } from './styled'\n\nexport interface ItemCardData {\n  title: string\n  content: ReactNode\n}\n\nexport const ItemDetail = ({ item, hideLine }: { item: ItemCardData; hideLine: boolean }) => {\n  return (\n    <ItemDetailPanel hideLine={hideLine}>\n      <div className=\"item__detail__title\">{item.title}</div>\n      <div className=\"item__detail__value\">{item.content}</div>\n    </ItemDetailPanel>\n  )\n}\n\nexport default ({\n  items,\n  children,\n  outputIndex,\n}: {\n  items: ItemCardData[]\n  children?: ReactNode\n  outputIndex?: string\n}) => {\n  return (\n    <ItemCardPanel id={outputIndex ? `output_${outputIndex}` : ''}>\n      <ItemContentPanel>\n        {items.map((item, index) => (\n          <ItemDetail key={item.title} item={item} hideLine={index === items.length - 1} />\n        ))}\n      </ItemContentPanel>\n      {children}\n    </ItemCardPanel>\n  )\n}\n","import styled from 'styled-components'\n\nexport const BlockListPanel = styled.div`\n  @media (min-width: 750px) {\n    margin-top: 25px;\n    margin-bottom: 40px;\n    border-radius: 6px;\n    overflow: hidden;\n    box-shadow: 0 2px 6px 0 rgba(77, 77, 77, 0.21);\n  }\n\n  @media (max-width: 750px) {\n    margin-top: 0px;\n    padding: 0px 20px 0px 20px;\n\n    .block__green__background {\n      margin-left: -20px;\n      height: 61px;\n      width: calc(100% + 40px);\n      background-color: ${props => props.theme.primary};\n      z-index: 1;\n    }\n  }\n\n  .block_list__pagination {\n    @media (max-width: 750px) {\n      margin-top: 5px;\n    }\n  }\n`\n\nexport const ContentTitle = styled.div`\n  font-size: 50px;\n  color: black;\n  margin: 0 auto;\n  text-align: center;\n\n  @media (max-width: 750px) {\n    font-size: 26px;\n  }\n\n  &:after {\n    content: '';\n    background: ${props => props.theme.primary};\n    height: 4px;\n    width: 197px;\n    display: block;\n    margin: 0 auto;\n\n    @media (max-width: 750px) {\n      width: 80px;\n    }\n  }\n`\n\nexport const ContentTable = styled.div`\n  @media (max-width: 750px) {\n    margin-top: -41px;\n    z-index: 2;\n  }\n`\n\nexport const HighLightValue = styled.div`\n  color: ${props => props.theme.primary};\n  font-size: 13px;\n  height: 16px;\n`\n\nexport const BlockRewardContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n\n  @media (max-width: 750px) {\n    align-items: flex-end;\n    justify-content: flex-start;\n  }\n\n  :after {\n    display: inline;\n    content: '+';\n    color: #7f7d7d;\n    font-size: 13px;\n  }\n`\n\nexport const BlockRewardPanel = styled.div`\n  margin-right: 8px;\n  display: flex;\n  justify-content: center;\n`\n","import React, { useEffect, Fragment, useMemo } from 'react'\nimport { useHistory, useLocation, Link } from 'react-router-dom'\nimport queryString from 'query-string'\nimport { useTranslation } from 'react-i18next'\nimport { parseSimpleDate } from '../../utils/date'\nimport { BlockListPanel, ContentTable, HighLightValue, BlockRewardContainer, BlockRewardPanel } from './styled'\nimport Content from '../../components/Content'\nimport { TableTitleItem, TableContentItem, TableMinerContentItem } from '../../components/Table'\nimport { TableTitleRow, TableContentRow } from '../../components/Table/styled'\nimport { shannonToCkb } from '../../utils/util'\nimport { parsePageNumber, adaptMobileEllipsis } from '../../utils/string'\nimport { ListPageParams, DELAY_BLOCK_NUMBER } from '../../utils/const'\nimport { localeNumberString } from '../../utils/number'\nimport { isMobile } from '../../utils/screen'\nimport i18n from '../../utils/i18n'\nimport Pagination from '../../components/Pagination'\nimport { useAppState, useDispatch } from '../../contexts/providers'\nimport { getBlocks } from '../../service/app/block'\nimport DecimalCapacity from '../../components/DecimalCapacity'\nimport ItemCard, { ItemCardData } from '../../components/Card/ItemCard'\n\nconst BlockValueItem = ({ value, to }: { value: string; to: string }) => {\n  return (\n    <HighLightValue>\n      <Link to={to}>\n        <span>{value}</span>\n      </Link>\n    </HighLightValue>\n  )\n}\n\ninterface TableTitleData {\n  title: string\n  width: string\n}\n\ninterface TableContentData {\n  width: string\n  to?: any\n  content: string\n}\n\nconst getTableContentDataList = (block: State.Block, index: number, page: number) => {\n  const blockReward =\n    index < DELAY_BLOCK_NUMBER && page === 1 ? (\n      <BlockRewardContainer>\n        <DecimalCapacity value={localeNumberString(shannonToCkb(block.reward))} hideUnit />\n      </BlockRewardContainer>\n    ) : (\n      <BlockRewardPanel>\n        <DecimalCapacity value={localeNumberString(shannonToCkb(block.reward))} hideUnit />\n      </BlockRewardPanel>\n    )\n\n  return [\n    {\n      width: '14%',\n      to: `/block/${block.number}`,\n      content: localeNumberString(block.number),\n    },\n    {\n      width: '8%',\n      content: `${block.transactionsCount}`,\n    },\n    {\n      width: '20%',\n      content: blockReward,\n    },\n    {\n      width: '43%',\n      content: block.minerHash,\n    },\n    {\n      width: '15%',\n      content: parseSimpleDate(block.timestamp),\n    },\n  ] as TableContentData[]\n}\n\nconst BlockCardItems = (block: State.Block, index: number, page: number) => {\n  const blockReward =\n    index < DELAY_BLOCK_NUMBER && page === 1 ? (\n      <BlockRewardContainer>\n        <DecimalCapacity value={localeNumberString(shannonToCkb(block.reward))} hideUnit />\n      </BlockRewardContainer>\n    ) : (\n      <BlockRewardPanel>\n        <DecimalCapacity value={localeNumberString(shannonToCkb(block.reward))} hideUnit />\n      </BlockRewardPanel>\n    )\n  return [\n    {\n      title: i18n.t('home.height'),\n      content: <BlockValueItem value={localeNumberString(block.number)} to={`/block/${block.number}`} />,\n    },\n    {\n      title: i18n.t('home.transactions'),\n      content: localeNumberString(block.transactionsCount),\n    },\n    {\n      title: i18n.t('home.block_reward'),\n      content: blockReward,\n    },\n    {\n      title: i18n.t('block.miner'),\n      content: <BlockValueItem value={adaptMobileEllipsis(block.minerHash, 12)} to={`/address/${block.minerHash}`} />,\n    },\n    {\n      title: i18n.t('home.time'),\n      content: parseSimpleDate(block.timestamp),\n    },\n  ] as ItemCardData[]\n}\n\nexport default () => {\n  const dispatch = useDispatch()\n  const { replace, push } = useHistory()\n  const { search } = useLocation()\n\n  const [t] = useTranslation()\n  const TableTitles = useMemo(() => {\n    return [\n      {\n        title: t('home.height'),\n        width: '14%',\n      },\n      {\n        title: t('home.transactions'),\n        width: '8%',\n      },\n      {\n        title: t('home.block_reward'),\n        width: '20%',\n      },\n      {\n        title: t('block.miner'),\n        width: '43%',\n      },\n      {\n        title: t('home.time'),\n        width: '15%',\n      },\n    ]\n  }, [t])\n\n  const parsed = queryString.parse(search)\n  const {\n    blockListState: { blocks = [], total },\n  } = useAppState()\n\n  const currentPage = parsePageNumber(parsed.page, ListPageParams.PageNo)\n  const pageSize = parsePageNumber(parsed.size, ListPageParams.PageSize)\n  const totalPages = Math.ceil(total / pageSize)\n\n  useEffect(() => {\n    if (pageSize > ListPageParams.MaxPageSize) {\n      replace(`/block/list?page=${currentPage}&size=${ListPageParams.MaxPageSize}`)\n    }\n    getBlocks(currentPage, pageSize, dispatch)\n  }, [replace, currentPage, pageSize, dispatch])\n\n  const onChange = (page: number) => {\n    push(`/block/list?page=${page}&size=${pageSize}`)\n  }\n\n  return (\n    <Content>\n      <BlockListPanel className=\"container\">\n        <div className=\"block__green__background\" />\n        {isMobile() ? (\n          <ContentTable>\n            <div>\n              {blocks.map((block: State.Block, index: number) => {\n                return <ItemCard key={block.number} items={BlockCardItems(block, index, currentPage)} />\n              })}\n            </div>\n          </ContentTable>\n        ) : (\n          <ContentTable>\n            <TableTitleRow>\n              {TableTitles.map((data: TableTitleData) => {\n                return <TableTitleItem width={data.width} title={data.title} key={data.title} />\n              })}\n            </TableTitleRow>\n            {blocks.map((block: State.Block, blockIndex: number) => {\n              return (\n                block && (\n                  <TableContentRow key={block.number}>\n                    {getTableContentDataList(block, blockIndex, currentPage).map(\n                      (data: TableContentData, index: number) => {\n                        const key = index\n                        return (\n                          <Fragment key={key}>\n                            {data.content === block.minerHash ? (\n                              <TableMinerContentItem width={data.width} content={data.content} />\n                            ) : (\n                              <TableContentItem width={data.width} content={data.content} to={data.to} />\n                            )}\n                          </Fragment>\n                        )\n                      },\n                    )}\n                  </TableContentRow>\n                )\n              )\n            })}\n          </ContentTable>\n        )}\n        <div className=\"block_list__pagination\">\n          <Pagination currentPage={currentPage} totalPages={totalPages} onChange={onChange} />\n        </div>\n      </BlockListPanel>\n    </Content>\n  )\n}\n"],"sourceRoot":""}